# This is a basic workflow to help you get started with Actions

name: Continuous Integration (CI)

# Controls when the action will run. 
on:
    push:
      branches: [main]
    

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out master branch
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Set up Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x
          architecture: x64 

      - name: Get latest tag (from yarn version command)
        uses: oprypin/find-latest-tag@v1
        with:
          repository: fractaal/hestia-contact-tracing-app  # The repository to scan.
          releases-only: false  # We know that all relevant tags have a GitHub release for them.
        id: previoustag  # The step ID to refer to later.

      - name: Install Quasar CLI 
        run: npm install -g @quasar/cli

      - name: Install Cordova
        run: npm install -g cordova
          
      - name: Install packages
        run: npm install

      - name: Perform build step
        run: npx quasar build -m cordova -T android

      - uses: r0adkll/sign-android-release@v1
        name: Sign APK
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: ./dist/cordova/android/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}

      - name: List build artifacts
        run: ls ./dist/cordova/android -R

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.previoustag.outputs.tag }}
          release_name: Release ${{ steps.previoustag.outputs.tag }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
          asset_name: Application.apk
          asset_content_type: application/vnd.android.package-archive